import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:provider/provider.dart';
import 'providers/user_profile_provider.dart';
import 'providers/theme_provider.dart';
import 'services/auth_service.dart';
import 'screens/welcome_screen.dart';
import 'screens/login_screen.dart';
import 'screens/signup_screen.dart';
import 'screens/home_screen.dart';
import 'screens/course_screen.dart';
import 'screens/tips_screen.dart';
import 'screens/profile_screen.dart';
import 'screens/course_detail_screen.dart';
import 'screens/new_user_dashboard.dart';
import 'screens/view_reports_screen.dart';
import 'screens/all_streaks_screen.dart';
import 'screens/notifications_screen.dart';
import 'screens/ai_chat/chat_screen.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Load environment variables
  await dotenv.load(fileName: ".env");
  print(
    'OpenRouter API key available: ${dotenv.env['OPENROUTER_API_KEY'] != null}',
  );

  // Initialize Firebase with options from firebase_options.dart
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  runApp(
    MultiProvider(
      providers: [
        Provider(create: (_) => AuthService()),
        ChangeNotifierProvider(create: (_) => UserProfileProvider()),
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);
    return MaterialApp(
      title: 'ShieldUp',
      debugShowCheckedModeBanner: false,
      theme: themeProvider.themeData,
      initialRoute: WelcomeScreen.routeName,
      routes: {
        WelcomeScreen.routeName: (_) => const WelcomeScreen(),
        LoginScreen.routeName: (_) => const LoginScreen(),
        SignupScreen.routeName: (_) => const SignupScreen(),
        ViewReportsScreen.routeName: (_) => const ViewReportsScreen(),
        HomeScreen.routeName: (context) {
          final args =
              ModalRoute.of(context)?.settings.arguments
                  as Map<String, dynamic>? ??
              {};
          return HomeScreen(
            loginEmail: args['email'] ?? '',
            selectedIndex: args['selectedIndex'] ?? 0,
          );
        },
        NewUserDashboardScreen.routeName: (context) {
          final email =
              ModalRoute.of(context)?.settings.arguments as String? ?? '';
          return NewUserDashboardScreen(loginEmail: email);
        },
        CourseScreen.routeName: (_) => const CourseScreen(),
        CourseDetailScreen.routeName: (context) {
          final args =
              ModalRoute.of(context)?.settings.arguments
                  as Map<String, dynamic>?;
          return CourseDetailScreen(
            courseId: args?['courseId'] ?? '',
            courseTitle: args?['courseTitle'] ?? '',
            courseContext: args?['courseContext'] ?? '',
          );
        },
        TipsScreen.routeName: (_) => const TipsScreen(),
        ProfileScreen.routeName: (context) {
          // Use email from UserProfileProvider if available, fallback to arguments
          final userProfile = Provider.of<UserProfileProvider>(
            context,
            listen: false,
          );
          final emailFromArgs =
              ModalRoute.of(context)?.settings.arguments as String? ?? '';
          return ProfileScreen(loginEmail: userProfile.email ?? emailFromArgs);
        },
        '/ai-chat': (context) {
          final args =
              ModalRoute.of(context)?.settings.arguments
                  as Map<String, dynamic>?;
          return ChatScreen(
            courseContext: args?['courseContext'] ?? '',
            courseTitle: args?['courseTitle'] ?? '',
          );
        },
        '/course': (_) => const CourseScreen(),
        AllStreaksScreen.routeName: (_) => const AllStreaksScreen(),
        NotificationsScreen.routeName: (_) => const NotificationsScreen(),
      },
    );
  }
}
